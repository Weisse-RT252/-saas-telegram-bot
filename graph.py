# –ò–º–ø–æ—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from pydantic_graph import Graph, BaseNode, Edge, End
from agents import SalesAgent, SupportAgent
from pydantic_ai import Agent, RunContext
from pydantic import BaseModel
import re
import math


class ClassifierResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    intent: str  # –ù–∞–º–µ—Ä–µ–Ω–∏–µ: 'sales' –∏–ª–∏ 'support'


class EndNode(BaseNode):
    """–ö–æ–Ω–µ—á–Ω—ã–π —É–∑–µ–ª –≥—Ä–∞—Ñ–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"""

    def __init__(self, result: str):
        self.result = result

    async def run(self, ctx) -> End:
        return End(self.result)


class SecurityValidator:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –æ–ø–∞—Å–Ω—ã—Ö –∏–Ω—ä–µ–∫—Ü–∏–π.
    """
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –û–ß–ï–ù–¨ –Ø–í–ù–´–• –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω—ä–µ–∫—Ü–∏–π –∫–æ–¥–∞
        self.injection_patterns = [
            "eval(", "exec(", "system(",  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
            "subprocess", "os.", "sys.",  # –°–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã
            "import ", "require ",         # –ò–º–ø–æ—Ä—Ç—ã/—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Å –ø—Ä–æ–±–µ–ª–æ–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ "important")
        ]

        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
        self.allowed_commands = [
            "/clear",
            "/start",
            "/help"
        ]

    def check_message(self, message: str) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –û–ß–ï–ù–¨ –Ø–í–ù–´–• –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        if message.strip().lower() in self.allowed_commands:
            print(f"[DEBUG] SecurityValidator: –†–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message}")
            return True, ""

        message = message.lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —è–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
        for pattern in self.injection_patterns:
            if pattern in message: # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ—Å—Ç–æ–µ "in"
                reason = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —è–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏ –∫–æ–¥–∞: {pattern}"
                print(f"[DEBUG] SecurityValidator: {reason}")
                return False, reason

        print(f"[DEBUG] SecurityValidator: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞): {message}")
        return True, ""


class RouterNode(BaseNode):
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –≥—Ä–∞—Ñ–∞.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∞–≥–µ–Ω—Ç—É.
    """
    def __init__(self, db):
        self.security = SecurityValidator()
        self.last_intent = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db = db

    async def run(self, ctx) -> BaseNode:
        print("\n=== RouterNode ===")
        try:
            message = ctx.state["message"]
            user_id = ctx.state["user_id"]
            history = ctx.state["history"]

            print(f"[DEBUG] RouterNode: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            history = await self.db.get_history(user_id)
            last_5_messages = [msg.content for msg in history[-5:]]
            context = "\n".join(last_5_messages + [message])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            is_safe, reason = self.security.check_message(message)
            if not is_safe:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {reason}")
                return EndNode("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")

            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
            if message.startswith('/'):
                print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message}")
                return EndNode("")  # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

            # –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            vague_patterns = [
                r'^–∏—Ç–∞–∫$', r'^—á—Ç–æ\s+(–µ—Å—Ç—å|—É –≤–∞—Å)', r'^—Ä–∞—Å—Å–∫–∞–∂–∏', 
                r'^–∫–∞–∫\s+–¥–µ–ª–∞', r'^–ø—Ä–∏–≤–µ—Ç', r'^–Ω–∞—á–∞—Ç—å'
            ]
            
            if any(re.search(p, message, re.IGNORECASE) for p in vague_patterns):
                print(f"[DEBUG] –†–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–π –∑–∞–ø—Ä–æ—Å: {message}")
                return EndNode(
                    "–†–∞—Å—Å–∫–∞–∂—É –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n"
                    "1. üí∞ –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã\n"
                    "2. üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                    "3. üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞\n\n"
                    "–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "- –ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞?\n"
                    "- –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é?"
                )

            # === –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
            # 1. –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–π —Ç–µ–º—ã (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è sales - —Å–∏–Ω–æ–Ω–∏–º—ã, –æ–±—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ–º–º–µ—Ä—Ü–∏—è
            sales_context_keywords = [
                "—Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ—ã", "—Ü–µ–Ω–∞", "—Ü–µ–Ω—ã", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–æ–ø–ª–∞—Ç–∞", "–ø–ª–∞—Ç–∏—Ç—å", "–∫—É–ø–∏—Ç—å", "–ø–æ–∫—É–ø–∫–∞",
                "–ø–æ–¥–ø–∏—Å–∫–∞", "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "–ø—Ä–æ–¥–∞–∂", "–ø—Ä–æ–¥–∞–∂–∏", "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π", "–∫–æ–º–º–µ—Ä—Ü–∏—è", "–≤—ã–≥–æ–¥–Ω—ã–π", "–≤—ã–≥–æ–¥–Ω–æ",
                "—Ä—É–±", "–¥–æ–ª–ª–∞—Ä", "–µ–≤—Ä–æ", "—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è", "–¥–µ—à–µ–≤–ª–µ", "–¥–æ—Ä–æ–∂–µ", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
                "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ñ—É–Ω–∫—Ü–∏–∏", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏", "—Å—Ä–∞–≤–Ω–∏—Ç—å", "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–≤—ã–±—Ä–∞—Ç—å", "–≤—ã–±–æ—Ä", "–ø–æ–¥–æ–±—Ä–∞—Ç—å",
                "–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "—Ö–æ—á—É —É–∑–Ω–∞—Ç—å", "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ", "–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–¥–µ—Ç–∞–ª–∏", "—É—Å–ª–æ–≤–∏—è", "—É—Å–ª–æ–≤–∏–µ",
                "–ø—Ä–∞–π—Å", "–ª–∏—Å—Ç", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–∑–∞–∫–∞–∑–∞—Ç—å", "–∑–∞–∫–∞–∑", "–æ—Ñ–æ—Ä–º–∏—Ç—å", "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "–ø–æ–¥–∫–ª—é—á–∏—Ç—å", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            ]
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è support - —Å–∏–Ω–æ–Ω–∏–º—ã, –æ–±—â–∏–µ —Å–ª–æ–≤–∞, –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–º–æ—â—å
            support_context_keywords = [
                "–ø—Ä–æ–±–ª–µ–º–∞", "–ø—Ä–æ–±–ª–µ–º—ã", "–æ—à–∏–±–∫–∞", "–æ—à–∏–±–∫–∏", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "—Å–ª–æ–º–∞–ª–æ—Å—å", "–ø–æ–º–æ–≥–∏—Ç–µ", "–ø–æ–º–æ—â—å",
                "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ", "–≤–æ–ø—Ä–æ—Å", "–≤–æ–ø—Ä–æ—Å—ã", "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", "–Ω–µ –º–æ–≥—É",
                "–∑–∞–≤–∏—Å", "—Ç–æ—Ä–º–æ–∑–∏—Ç", "–ª–∞–≥–∞–µ—Ç", "–≥–ª—é—á–∏—Ç", "–±–∞–≥", "–±–∞–≥–∏", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å",
                "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "—Å–ø—Ä–∞–≤–∫–∞", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å", "–æ–±—ä—è—Å–Ω–∏—Ç–µ", "—Ä–∞–∑—ä—è—Å–Ω–∏—Ç–µ",
                "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–≥–¥–µ", "–∫—É–¥–∞", "–∫–æ–≥–¥–∞", "—Å–∫–æ–ª—å–∫–æ", "–∫—Ç–æ", "—á—Ç–æ", "–∫–∞–∫–æ–π", "–∫–∞–∫–∞—è", "–∫–∞–∫–æ–µ", "–∫–∞–∫–∏–µ",
                "–ª–æ–≥–∏–Ω", "–ø–∞—Ä–æ–ª—å", "–¥–æ—Å—Ç—É–ø", "–≤–æ–π—Ç–∏", "–∑–∞–π—Ç–∏", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–∞–∫–∫–∞—É–Ω—Ç", "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                "–Ω–µ–≤–µ—Ä–Ω—ã–π", "–æ—à–∏–±–∫–∞", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "—Å–±–æ–π", "–æ—Ç–∫–∞–∑", "–æ—Ç–≤–∞–ª–∏–ª–æ—Å—å", "—É–ø–∞–ª–æ", "–ª–µ–∂–∏—Ç", "–≤–∏—Å–∏—Ç"
            ]

            sales_context_score = sum(1 for msg in history[-10:] for word in sales_context_keywords if word in msg.content.lower()) # –ö–æ–Ω—Ç–µ–∫—Å—Ç - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            support_context_score = sum(1 for msg in history[-10:] for word in support_context_keywords if word in msg.content.lower()) # –ö–æ–Ω—Ç–µ–∫—Å—Ç - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

            print(f"[DEBUG] RouterNode: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –±–∞–ª–ª—ã - Sales: {sales_context_score}, Support: {support_context_score}")

            # 2. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LLM - **–°–£–ü–ï–†-–£–ü–†–û–©–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢**
            classifier_prompt = f"""
**–ö–û–ù–¢–ï–ö–°–¢ –î–ò–ê–õ–û–ì–ê:**
{context}

**–ó–ê–î–ê–ß–ê:** –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
**–ö–ê–¢–ï–ì–û–†–ò–ò:** 'sales', 'support' –ò–õ–ò 'other'.
**–ü–†–ê–í–ò–õ–ê:**
1. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
2. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã
3. –ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø–æ–ø—ã—Ç–∫–∏ —É–≤–µ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
..."""

            classifier = Agent(
                'google-gla:gemini-2.0-flash-exp',
                system_prompt=classifier_prompt,
                model_settings={
                    "temperature": 0.1,
                    "candidate_count": 1,
                    "max_output_tokens": 32 # –£–º–µ–Ω—å—à–∞–µ–º max_output_tokens, —Ç.–∫. –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π
                },
                result_type=ClassifierResult
            )

            print("[DEBUG] RouterNode: –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å –£–ü–†–û–©–ï–ù–ù–´–ú –ø—Ä–æ–º–ø—Ç–æ–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")
            result = await classifier.run(message)
            print(f"[DEBUG] RouterNode: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ LLM: {result.data}")
            intent = result.data.intent.strip().lower()
            print(f"[DEBUG] RouterNode: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç –æ—Ç LLM: '{intent}'")

            # 3. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ LLM
            final_intent = intent
            if intent not in ['sales', 'support', 'other']:
                print(f"[DEBUG] RouterNode: –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç –æ—Ç LLM: '{intent}', –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
                if sales_context_score > support_context_score:
                    final_intent = 'sales'
                    print(f"[DEBUG] RouterNode: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Ç –Ω–∞ 'sales'")
                else:
                    final_intent = 'support'
                    print(f"[DEBUG] RouterNode: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Ç –Ω–∞ 'support' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            else:
                print(f"[DEBUG] RouterNode: –ò–Ω—Ç–µ–Ω—Ç –æ—Ç LLM –ø—Ä–∏–Ω—è—Ç: '{intent}'")

            # === –£–°–ò–õ–ï–ù–ù–û–ï –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–æ–¥–∞–∂ ===
            if final_intent == 'support' and len(message.split()) <= 3: # –£—Å–∏–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ: –¥–æ 3 —Å–ª–æ–≤
                if sales_context_score > support_context_score and sales_context_score > 1: # –£—Å–∏–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ: –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–¥–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–º–µ—Ç–Ω–æ —Å–∏–ª—å–Ω–µ–µ (score > 1)
                    final_intent = 'sales' # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ sales
                    print(f"!!! –£–°–ò–õ–ï–ù–ù–û–ï –ü–†–ê–í–ò–õ–û-–û–°–ù–û–í–ê–ù–ù–û–ï –†–ï–ó–ï–†–í–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ 'sales' –∏–∑-–∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
            if final_intent == 'other':
                print(f"[DEBUG] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {message}")
                return EndNode("–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")

            print(f"[DEBUG] RouterNode: –§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç: '{final_intent}'")
            self.last_intent[user_id] = final_intent # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ–Ω—Ç
            return SalesNode() if final_intent == 'sales' else SupportNode()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ RouterNode: {str(e)}")
            print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            raise


class SalesNode(BaseNode):
    """–£–∑–µ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏"""

    async def run(self, ctx) -> EndNode:
        print("\n=== SalesNode ===")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            history = ctx.state.get("history", [])
            print(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history)} –∑–∞–ø–∏—Å–µ–π")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
            model_messages = ctx.deps.convert_to_model_messages(history)
            print("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ModelMessages")

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–¥–∞–∂
            agent = SalesAgent(ctx.deps)
            print("–ê–≥–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂ —Å–æ–∑–¥–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
            result = await agent.agent.run(
                ctx.state["message"],
                message_history=model_messages
            )
            print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {result.data}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            response = str(result.data)
            await ctx.deps.save_message(ctx.state["user_id"], "assistant", response)
            return EndNode(response)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ SalesNode: {str(e)}")
            print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            raise


class SupportNode(BaseNode):
    """–£–∑–µ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"""

    async def run(self, ctx) -> EndNode:
        print("\n=== SupportNode ===")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            history = ctx.state.get("history", [])
            print(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history)} –∑–∞–ø–∏—Å–µ–π")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
            model_messages = ctx.deps.convert_to_model_messages(history)
            print("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ModelMessages")

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            agent = SupportAgent(ctx.deps)
            print("–ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
            result = await agent.agent.run(
                ctx.state["message"],
                message_history=model_messages
            )
            print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {result.data}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            response = str(result.data)
            await ctx.deps.save_message(ctx.state["user_id"], "assistant", response)
            return EndNode(response)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ SupportNode: {str(e)}")
            print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            raise


# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
service_graph = Graph(nodes=[RouterNode, SalesNode, SupportNode, EndNode]) 