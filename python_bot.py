import os
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import google.generativeai as genai
from google.generativeai.types import GenerationConfig
from io import BytesIO
from dotenv import load_dotenv
import time
import asyncio
import httpx
from google.api_core.exceptions import GoogleAPIError

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini:cite[6]
genai.configure(
    api_key=os.getenv("GEMINI_API_KEY"),
    transport="rest",
    client_options={
        # "api_endpoint": "https://generativelanguage.googleapis.com/v1"
    }
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
REQUEST_COUNTER = 0

gemini_model = genai.GenerativeModel("gemini-2.0-flash-exp")

async def verify_tor_ip():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ IP"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("https://api.ipify.org", timeout=15)
            return response.text
    except Exception as e:
        logging.error(f"IP verification failed: {e}")
        return None

async def start(update: Update, _):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –Ø –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Gemini —á–µ—Ä–µ–∑ Tor!\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:\n"
        "- –¢–µ–∫—Å—Ç/–≥–æ–ª–æ—Å–æ–≤—ã–µ\n"
        "- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "- PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "/ip - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IP\n"
        "/process_doc - –ê–Ω–∞–ª–∏–∑ PDF"
    )

async def handle_message(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global REQUEST_COUNTER
    message = update.message
    max_retries = 30
    
    for attempt in range(max_retries):
        try:
            REQUEST_COUNTER += 1
            if REQUEST_COUNTER % 2 == 0:
                await verify_tor_ip()

            contents = []

            # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            if message.text:
                contents.append({"role": "user", "parts": [{"text": message.text}]})

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if message.photo:
                photo_file = await message.photo[-1].get_file()
                img_data = await photo_file.download_as_bytearray()
                contents.append({
                    "role": "user",
                    "parts": [{
                        "inline_data": {
                            "mime_type": "image/jpeg",
                            "data": img_data.decode("latin-1")
                        }
                    }]
                })

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if message.document:
                doc_file = await message.document.get_file()
                doc_data = await doc_file.download_as_bytearray()
                
                if message.document.mime_type == "application/pdf":
                    contents.append({
                        "role": "user",
                        "parts": [{
                            "file_data": {
                                "mime_type": "application/pdf",
                                "file_uri": f"data:application/pdf;base64,{doc_data.hex()}"
                            }
                        }]
                    })
                else:
                    contents.append({
                        "role": "user",
                        "parts": [{"text": f"–î–æ–∫—É–º–µ–Ω—Ç —Ç–∏–ø–∞ {message.document.mime_type}"}]
                    })

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            response = gemini_model.generate_content(
                contents=contents,
                generation_config=GenerationConfig(
                    temperature=0.7,
                    max_output_tokens=1000,
                ),
                request_options={"timeout": 30}
            )
            
            if not response.text:
                raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")

            await message.reply_text(response.text)
            return  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {str(e)}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
    await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")

async def check_ip(update: Update, _):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ IP"""
    try:
        response = requests.get("https://api.ipify.org?format=json", timeout=10)
        await update.message.reply_text(f"üåê –¢–µ–∫—É—â–∏–π IP: {response.json()['ip']}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def process_document(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Gemini"""
    try:
        doc_file = await update.message.document.get_file()
        doc_data = await doc_file.download_as_bytearray()

        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content(
            [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π PDF –¥–æ–∫—É–º–µ–Ω—Ç:",
                {
                    "file_data": {
                        "mime_type": "application/pdf",
                        "file_uri": f"data:application/pdf;base64,{doc_data.hex()}"
                    }
                }
            ],
            generation_config=GenerationConfig(
                temperature=0.5,
                max_output_tokens=2000
            )
        )

        await update.message.reply_text(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n{response.text}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def handle_gemini_request(prompt):
    for attempt in range(5):
        try:
            response = await gemini_model.generate(prompt)
            return response
        except GoogleAPIError as e:
            if e.code == 403:
                logging.warning("Blocked IP detected! Renewing...")
                success = await verify_tor_ip()
                if not success:
                    raise
                await asyncio.sleep(30)
            else:
                raise

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    handlers = [
        CommandHandler("start", start),
        CommandHandler("ip", check_ip),
        CommandHandler("process_doc", process_document),
        MessageHandler(filters.ALL, handle_message)
    ]

    for handler in handlers:
        app.add_handler(handler)

    app.run_polling()

if __name__ == "__main__":
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    main()